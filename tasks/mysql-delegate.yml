---

- name: Install mysql server packages
  package:
    name: "{{ kolide_mysqlserver_pkgs | default([]) }}"
    state: present
  register: pkg_result
  until: pkg_result is success
  delegate_to: "{{ kolide_mysql_host }}"

- name: ensure mysqld is enabled and started
  service:
    name: "{{ mysql_svc | default('mysqld') }}"
    state: started
    enabled: yes
  delegate_to: "{{ kolide_mysql_host }}"
  when: >
    not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- block:
    - name: Docker | Manually start mysql service
      shell: >
        /usr/bin/mysqld_safe --datadir='/var/lib/mysql' > /tmp/mysqld_safe.out 2>&1 &
      args:
        creates: /tmp/mysqld_safe.out
        chdir: /var/lib/mysql
      ignore_errors: true
      delegate_to: "{{ kolide_mysql_host }}"
  when: >
    (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- name: Check if mysql root password updated
  stat:
    path: /root/.ansible_mysqlpass
  register: mysqlpass
- block:
    ## http://mysqlserverteam.com/initialize-your-mysql-5-7-instances-with-ease/
    - name: recover mysqld temporary password
      command: "awk '/temporary password/ { print $NF }' {{ mysql_log }}"
      register: tmppass
      changed_when: false
      delegate_to: "{{ kolide_mysql_host }}"
    - debug: var=tmppass.stdout
    - name: Set fact for temporary mysql credentials
      set_fact:
        mysql_user: root
        mysql_pass: "{{ tmppass.stdout }}"
    ## https://www.percona.com/blog/2016/03/16/change-user-password-in-mysql-5-7-with-plugin-auth_socket/
    - name: change mysqld root password
      shell: >
        mysql -u root --connect-expired-password -e "alter user 'root'@'localhost'
          IDENTIFIED WITH mysql_native_password BY '{{ kolide_mysql_root_pass }}';"
      ignore_errors: true
      delegate_to: "{{ kolide_mysql_host }}"
    - name: install mysql local configuration for root user
      template:
        src: my.cnf.j2
        dest: /root/.my.cnf
        mode: '0600'
        backup: yes
      delegate_to: "{{ kolide_mysql_host }}"
    ## https://www.percona.com/blog/2016/03/16/change-user-password-in-mysql-5-7-with-plugin-auth_socket/
    - name: change mysqld root password
      shell: >
        mysql -u root --connect-expired-password -e "alter user 'root'@'localhost'
          IDENTIFIED WITH mysql_native_password BY '{{ kolide_mysql_root_pass }}';"
      ignore_errors: true
      delegate_to: "{{ kolide_mysql_host }}"
    - name: remove mysql local configuration for root user
      file:
        dest: /root/.my.cnf
        state: absent
      delegate_to: "{{ kolide_mysql_host }}"
    - name: Add mysql marker
      file:
        dest: /root/.ansible_mysqlpass
        mode: '0600'
        state: touch
  when: >
    ansible_os_family == 'RedHat' and not mysqlpass.stat.exists

- name: Create kolide mysql database
  mysql_db:
    name: "{{ kolide_mysql_db }}"
    state: present
    login_host: "{{ kolide_mysql_host }}"
    login_user: root
    login_password: "{{ kolide_mysql_root_pass | default(omit) }}"
  delegate_to: "{{ kolide_mysql_host }}"
  when: not kolide_mysql_backup_restore

- block:
    - name: Get database restore file hash
      stat:
        path: "{{ kolide_mysql_restorefile }}"
        checksum_algorithm: sha256
      register: restorefile
      delegate_to: localhost
      become: no

    - name: Check if restore file has already been restored
      stat:
        path: "/root/.kolide_mysql_restore-{{ restorefile.stat.checksum }}"
      register: restored
      when: restorefile.stat.exists

    - name: Create kolide mysql database from backup
      mysql_db:
        name: "{{ kolide_mysql_db }}"
        login_host: "{{ kolide_mysql_host }}"
        login_user: root
        login_password: "{{ kolide_mysql_root_pass | default(omit) }}"
        state: import
        target: "{{ kolide_mysql_restorefile }}"
      when: restorefile.stat.exists and not restored.stat.exists

    - name: add restoration marker
      file:
        dest: "/root/.kolide_mysql_restore-{{ restorefile.stat.checksum }}"
        mode: '0600'
        state: touch
      when: restorefile.stat.exists and not restored.stat.exists
  when: kolide_mysql_backup_restore
